#!/usr/bin/env ruby
# frozen_string_literal: true

require "pdf_links_checker"
require "pdf-reader"
require "net/http"

file_name = ARGV[0]
file_path = "#{Dir.pwd}/#{file_name}"

path = File.expand_path(file_path)
doc = PDF::Reader.new(path)

class Annotations
  def initialize(pdf_doc)
    @objects = pdf_doc.objects
  end

  def find(references)
    lookup_all(references)
  end

  def lookup_all(refs)
    refs = *refs
    refs.map { |ref| lookup(ref) }
  end

  def lookup(ref)
    object = objects[ref]
    return object unless object.is_a?(Array)

    lookup_all(object)
  end

  def is_link?(object)
    object[:Type] == :Annot && [:Link].include?(object[:Subtype])
  end

  def is_note?(object)
    object[:Type] == :Annot && %i[Text FreeText].include?(object[:Subtype])
  end

  private

  attr_reader :objects
end


class Page
  def initialize(pdf_page, annotations)
    @pdf_page = pdf_page
    @annotations = annotations
  end

  def links
    find_links
  end

  private

  def find_links
    references = (pdf_page.attributes[:Annots] || [])
    annotations.find(references).flatten
  end

  attr_reader :pdf_page, :annotations
end

class URL
  def initialize(pdf_link)
    @pdf_link = pdf_link
  end

  def invalid?
    uri = to_s
    url = URI.parse(uri)
    req = Net::HTTP.new(url.host, url.port)
    req.use_ssl = true if uri.include?("https")

    begin
      res = req.request_head(url.path)
      true if res.code == "404"
    rescue StandardError => e
      true
    end
  end

  def to_s
    pdf_link[:A][:URI]
  end

  private

  attr_reader :pdf_link
end

class Links
  attr_reader :invalid

  def initialize(links_array)
    @urls= links_array.map { |link| URL.new(link) }
    @invalid = @urls.select { |url| url.invalid? }
  end

  def total_count
    urls.count
  end

  def valid_count
    total_count - invalid.count
  end

  private

  attr_reader :urls
end

class PdfDocument
  def initialize(pdf_doc)
    @pdf_doc = pdf_doc
  end

  def links
    pages.reduce([]) { |links, page| links.concat(page.links) }.then { |links| Links.new(links) }
  end

  private

  def pages
    pdf_doc.pages.map { |page| Page.new(page, Annotations.new(pdf_doc)) }
  end

  attr_reader :pdf_doc
end

links = PdfDocument.new(doc).links

puts "Working links: #{links.valid_count} of #{links.total_count}"
links.invalid.each { |bad_link| puts bad_link }
